#레벤슈타인 거리

2개의 문자열을 2차원 배열로 교차하여 비교, 편집거리를 구하는 알고리즘

X행 + 1 = 문자 삭제
Y행 + 1 = 문자 삽입
X-1 , Y-1 + 가중치 = 두 문자가 일치시 0, 아니면 1

    L E V E N S H T E 
  0 1 2 3 4 5 6 7 8 9
L 1 0 1 2 3 4 5 6 7 8 
E 2 1 0 1 1 2 3 4 5 5
W 3 2 1 1 2 2 3 4 5 6
A 4 3 2 2 2 3 3 4 5 6
N 5 4 3 3 3 2 3 4 5 6
D 6 5 4 4 4 3 3 4 5 6
O 7 6 5 5 5 4 4 4 5 6
W 8 7 6 6 6 5 5 5 5 6
S 9 8 7 7 7 6 5 6 6 6

ex) 레반도프스키 vs 레벤슈타인

X+1,0 / 0,Y+1 / X-1,Y-1 중 최소값을 X,Y에 대입한다
단, 문자가 일치하지 않을 경우는 최소값에 가중치 + 1

최종적으로 최대행+1 , 최대열+1에 남은 숫자가
최소 편집거리를 나타낸다.

# 예시 코드

  matrix = [[] for i in range(A 문자열 길이 + 1)]
  for i in range(A 문자열 길이 + 1):
    matrix[i] = [0 for j in range(B 문자열 길이 + 1)]
  
  for i in range(A길이 + 1):
    matrix[i][0] = i
  for j in range(B길이 + 1):
    matrix[0][j] = j

를 통해 2차원 배열을 초기화하면

    L E V E N S H T E
  0 1 2 3 4 5 6 7 8 9
L 1
E 2
W 3
A 4
N 5
D 6
O 7
W 8
S 9

로 초기화 된다.
(글자수에 맞춰서 첫행, 첫열을 길이로 채워넣는다, 인덱스 0은 공백처리기 때문에 항상 문자열길이 +1 이 range)

여기서부터 연산을 시작하면

  for i in range(1, A길이 + 1):
    A_sen = a[i-1]
    for j in range(1, B길이 + 1):
      B_sen = b[i-1]
      cost = 0 if (A_sen == B_sen) else 1

      target = [ matrix[i-1][j]+1 , matrix[i][j-1]+1, matrix[i-1][j-1]+cost ]

      matrix[i][j] = min(target)

   return matrix[A길이][B길이]


A문자(A_sen), B문자(B_sen)를 지정하고
가중치 cost는 두 문자가 일치시 0, 아니면 1

target 은 열, 행, 열-1행-1 에 코스트를 더한
세가지 중에 최소값이 i,j 에 들어감으로 전부 연산된다.

마지막 리턴은 마지막 행,열에 속한 숫자이며
이것이 최소 레벤슈타인 편집 거리를 나타낸다.

